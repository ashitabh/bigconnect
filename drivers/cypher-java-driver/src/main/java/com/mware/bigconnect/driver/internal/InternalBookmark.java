/*
 * Copyright (c) 2013-2020 "BigConnect,"
 * MWARE SOLUTIONS SRL
 *
 * Copyright (c) 2002-2020 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.mware.bigconnect.driver.internal;

import java.io.Serializable;
import java.util.*;

import static java.util.Objects.requireNonNull;

public final class InternalBookmark implements Bookmark
{
    private static final InternalBookmark EMPTY = new InternalBookmark( Collections.emptySet() );

    private final Collection<String> values;

    private InternalBookmark( Collection<String> values )
    {
        requireNonNull( values );
        if ( !(values instanceof Serializable) )
        {
            // The Collection interface does not enforce Serializable, but all built-in Collection implementations actually are Serializable.
            // This check ensures that we always provide values using these java built-in Collection objects.
            throw new IllegalArgumentException( "The bookmark value should only be of Java built-in types such as ArrayList, HashSet which are serializable." );
        }
        this.values = values;
    }

    public static InternalBookmark empty()
    {
        return EMPTY;
    }

    public static InternalBookmark from( Iterable<Bookmark> bookmarks )
    {
        if ( bookmarks == null )
        {
            return empty();
        }

        if ( bookmarks instanceof Collection)
        {
            int size = ((Collection) bookmarks).size();
            if ( size == 0 )
            {
                return empty();
            }
            else if ( size == 1 )
            {
                return from( bookmarks.iterator().next() );
            }
        }

        Set<String> newValues = new HashSet<>();
        for ( Bookmark value : bookmarks )
        {
            if ( value == null )
            {
                continue; // skip any null bookmark value
            }
            assertInternalBookmark( value );
            newValues.addAll( ((InternalBookmark) value).values );
        }
        return new InternalBookmark( newValues );
    }

    private static InternalBookmark from( Bookmark bookmark )
    {
        if ( bookmark == null )
        {
            return empty();
        }
        assertInternalBookmark( bookmark );
        return (InternalBookmark) bookmark; // we directly return the same bookmark back
    }

    private static void assertInternalBookmark( Bookmark bookmark )
    {
        if ( !(bookmark instanceof InternalBookmark) )
        {
            throw new IllegalArgumentException( String.format( "Received bookmark '%s' is not generated by driver sessions.", bookmark ) );
        }
    }

    public static InternalBookmark parse( String value )
    {
        if ( value == null )
        {
            return empty();
        }
        return parse( Collections.singletonList( value ) );
    }

    /**
     * Used for test only
     */
    public static InternalBookmark parse( Collection<String> values )
    {
        if ( values == null )
        {
            return empty();
        }
        return new InternalBookmark( values );
    }

    public boolean isEmpty()
    {
        return values.isEmpty();
    }

    public Iterable<String> values()
    {
        return values;
    }

    @Override
    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }
        if ( o == null || getClass() != o.getClass() )
        {
            return false;
        }
        InternalBookmark bookmark = (InternalBookmark) o;
        return Objects.equals( values, bookmark.values );
    }

    @Override
    public int hashCode()
    {
        return Objects.hash( values );
    }

    @Override
    public String toString()
    {
        return "Bookmark{values=" + values + "}";
    }
}
